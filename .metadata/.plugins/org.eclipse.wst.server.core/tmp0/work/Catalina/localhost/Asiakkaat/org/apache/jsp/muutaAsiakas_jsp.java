/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.34
 * Generated at: 2020-05-14 20:51:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class muutaAsiakas_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\">\r\n");
      out.write("<script src=\"Scripts/main.js\"></script>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"http://ajax.aspnetcdn.com/ajax/jquery.validate/1.15.0/jquery.validate.min.js\"></script>\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form id=\"tiedot\">\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<thead>\t\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th colspan=\"5\" class=\"oikealle\"><span id=\"takaisin\">Takaisin listaukseen</span></th> <!-- tässä oleva span voisi olla suoraan <a href=\"listaaasiakkaat.jsp\"></a> (nyt en ole ihan varma tuleeko ympärille tupsut vai hipsut) mutta, jos on a tagissa linkki, niin ei tarvitse scriptissä ottaa kiinni $(\"#takaisin).click(function(){ document.location=\"listaaasiakkaat.jsp\"; -->\r\n");
      out.write("\t\t\t</tr>\t\t\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<th>Etunimi</th>\r\n");
      out.write("\t\t\t\t<th>Sukunimi</th>\r\n");
      out.write("\t\t\t\t<th>Puhelin</th>\r\n");
      out.write("\t\t\t\t<th>Sposti</th>\r\n");
      out.write("\t\t\t\t<th>Hallinta</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"etunimi\" id=\"etunimi\"></td>\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"sukunimi\" id=\"sukunimi\"></td>\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"puhelin\" id=\"puhelin\"></td>\r\n");
      out.write("\t\t\t\t<td><input type=\"text\" name=\"sposti\" id=\"sposti\"></td> \r\n");
      out.write("\t\t\t\t<td><input type=\"submit\" id=\"tallenna\" value=\"Hyväksy\"></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</tbody>\r\n");
      out.write("\t</table>\r\n");
      out.write(" <input type=\"hidden\" name=\"asiakas_id\" id=\"asiakas_id\"> <!-- jos asiakas_id:tä muutettaisiin: säilötään vanha asiakas_id, että nähdään mihin id:hen muutokset kohdistuu -->\r\n");
      out.write("</form>\r\n");
      out.write("<span id=\"ilmo\"></span> <!-- The <span> tag is an inline container used to mark up a part of a text, or a part of a document. The <span> tag provides no visual change by itself, but when it is marked, you can style it with CSS, or manipulate it with JavaScript -->\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("$ (document).ready(function(){ //jqueryn aloitus tagi = $ (document).ready(function(){\r\n");
      out.write("\t$(\"#takaisin\").click(function(){\r\n");
      out.write("\t\tdocument.location=\"listaaasiakkaat.jsp\";\r\n");
      out.write("\t});\r\n");
      out.write("\t// haetaan muutettavan asiakkaan tiedot. Kutsutaan backin \"GET\" metodia.\r\n");
      out.write("\t//GET /asiakkaat/haeyksi/asiakas_id\r\n");
      out.write("\tvar asiakas_id=requestURLParam(\"asiakas_id\");\r\n");
      out.write("\t$.ajax({url:\"asiakkaat/haeyksi/\"+asiakas_id, type:\"GET\", dataType:\"json\", success: function(result){ // eli haetaan GET:llä ja se mitä GET-metodi palauttaa asettuu result:iin\r\n");
      out.write("\t\t//$(\"#id\").val(result.asiakas_id); // vanha ja uusi asiakas_id saa aluksi saman arvon, jos id:tä muutettaisiin\r\n");
      out.write("\t\t$(\"#asiakas_id\").val(result.asiakas_id); // tässä puretaan haetut tiedot lomakkeen kenttiin \r\n");
      out.write("\t\t$(\"#etunimi\").val(result.etunimi);\t\t// $(\"kentän nimi =esim. #asiakas_id\").val(result.kentän id=esim.asiakas_id);\r\n");
      out.write("\t\t$(\"#sukunimi\").val(result.sukunimi);\t//resul.kentän id hakee tuloksen joka asettuu lomakkeen #kentän nimi kohtaan?\r\n");
      out.write("\t\t$(\"#puhelin\").val(result.puhelin);\r\n");
      out.write("\t\t$(\"#sposti\").val(result.sposti);\r\n");
      out.write("\t}});\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#tiedot\").validate({\t\t\t//arvojen validointi\t\t\t\r\n");
      out.write("\t\trules: {\t\t\t\t\t//validoinnin säännöt\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\tetunimi:  {\t\t\t\t//kertoo mikä arvo validoidaan ja millä säännöillä\r\n");
      out.write("\t\t\t\trequired: true,\t\t//true määrittelee, että kentässä on oltava jotain/joku arvo\r\n");
      out.write("\t\t\t\tminlength: 3\t\t//arvon minimi pituus on oltava 3 merkkiä\t\t\r\n");
      out.write("\t\t\t},\t\r\n");
      out.write("\t\t\tsukunimi:  {\r\n");
      out.write("\t\t\t\trequired: true,\r\n");
      out.write("\t\t\t\tminlength: 2\t\t\t\t\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tpuhelin:  {\r\n");
      out.write("\t\t\t\trequired: true,\r\n");
      out.write("\t\t\t\tminlength: 1\r\n");
      out.write("\t\t\t},\t\r\n");
      out.write("\t\t\tsposti:  {\r\n");
      out.write("\t\t\t\trequired: true,\r\n");
      out.write("\t\t\t\tminlength: 6,\r\n");
      out.write("\t\t\t\t}\t\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tmessages: {\t\t\t\t\t//jos säännöt ei toteudu\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tetunimi: {     \r\n");
      out.write("\t\t\t\trequired: \"Puuttuu\",\t\t//kirjoittaa selaimeen arvokentän kohdalle mitä lainausmerkkien sisällä on\r\n");
      out.write("\t\t\t\tminlength: \"Liian lyhyt\"\t\t\t\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tsukunimi: {\r\n");
      out.write("\t\t\t\trequired: \"Puuttuu\",\r\n");
      out.write("\t\t\t\tminlength: \"Liian lyhyt\"\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tpuhelin: {\r\n");
      out.write("\t\t\t\trequired: \"Puuttuu\",\r\n");
      out.write("\t\t\t\tminlength: \"Liian lyhyt\"\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tsposti: {\r\n");
      out.write("\t\t\t\trequired: \"Puuttuu\",\r\n");
      out.write("\t\t\t\tminlength: \"Liian lyhyt\",\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\t\t\t\r\n");
      out.write("\t\tsubmitHandler: function(form) {\t//tämä toteaa lomakkeen toiminnot suoritetuiksi, jonka jälkeen...\r\n");
      out.write("\t\t\tpaivitaTiedot(); //... kutsutaan paivitaTiedot-metodia\r\n");
      out.write("\t\t}\t\t\r\n");
      out.write("\t}); \t\r\n");
      out.write("});\r\n");
      out.write("//funktio tietojen päivitystä varten. Kutsutaan backin PUT-metodia ja välitetään kutsun mukana uudet tiedot json-stringinä.\r\n");
      out.write("//PUT /autot/\r\n");
      out.write("function paivitaTiedot(){\t\r\n");
      out.write("\tvar formJsonStr = formDataJsonStr($(\"#tiedot\").serializeArray()); //muutetaan lomakkeen tiedot json-stringiksi formJsonDataStr=metodi, joka muuttaa tiedot json stringiksi, #tiedot=lomakkeen (jonka tiedot muutetaan) id, serializeArray=metodi,joka järjestelee lomakkeen tiedot arvopareiksi? Arraylistaan?\r\n");
      out.write("\t$.ajax({url:\"asiakkaat\", data:formJsonStr, type:\"PUT\", dataType:\"json\", success:function(result) { //result on joko {\"response:1\"} tai {\"response:0\"} $.ajax({url: \"TÄHÄN SERVLETIN NIMI, JOLLE TIEDOT VÄLITETÄÄN\", data: TÄHÄN DATA, JOKA SERVLETILLE VÄLITETÄÄN(KTS. YLEMPI RIVI, JOSSA MUUTTUJAAN KIINNITETÄÄN KO.DATA), type: \"TÄHÄN, MILLE SERVLETIN METODILLE TIEDOT VÄLITETÄÄN (GET, POST, PUT, DELETE)\"\", datatype: TÄHÄN DATAN TYYPPI, MINKÄLAISENA TIEDOT SERVLETILLE VÄLITETÄÄN success: PALAUTTAA TULOKSEN (result) (MISTÄ, mikä funktio?), JOKO 1 TAI 0, RIIPPUEN ONNISTUIKO LISÄYS?  })      \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t// miksi tässä ei ole dataType:\"json\" pakollinen? tehtävän vastauksessa ei ollut dataTypea?\r\n");
      out.write("\t\tif(result.response==0){\r\n");
      out.write("      \t$(\"#ilmo\").html(\"Asiakkaan päivittäminen epäonnistui.\"); // #ilmo= id, sille kohdalle koodissa, johon kirjoitetaan viesti\r\n");
      out.write("      }else if(result.response==1){\t\t\t\r\n");
      out.write("      \t$(\"#ilmo\").html(\"Asiakkaan päivittäminen onnistui.\");\r\n");
      out.write("      \t$( \"#etunimi\", \"#sukunimi\", \"#puhelin\", \"#sposti\").val(\"\"); //tämä tyhjentää valitut kentät lomakkeelta selaimessa, kun toiminto on suoritettu\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}});\t\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
